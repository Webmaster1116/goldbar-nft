{
  "address": "0x8A5669A5b011689872AFfB64cd4BE2e2e509A370",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_initBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nftcreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressMintedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployedverified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIsRevealed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainCollections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainNFTforUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaDataFolder",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPerAddressLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notRevealedUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyWhitelisted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintState",
          "type": "uint256"
        }
      ],
      "name": "setMintState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setNftPerAddressLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_state",
          "type": "uint256"
        }
      ],
      "name": "setOnlyWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_RevealedURI",
          "type": "string"
        }
      ],
      "name": "setRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setmaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "whitelistUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistedAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x76bfea06aa2d4b34f9cc970c9096c468cde89faf61e50757dd83635aa95ef3b6",
  "receipt": {
    "to": null,
    "from": "0xf5aF44B2e01445cD2093CE254CD95b80354fCC97",
    "contractAddress": "0x8A5669A5b011689872AFfB64cd4BE2e2e509A370",
    "transactionIndex": 61,
    "gasUsed": "3156175",
    "logsBloom": "0x
    "blockHash": "0xedcfb01a096701f1a84f843e6c13e556a6e569665b184329eac1406016bef674",
    "transactionHash": "0x76bfea06aa2d4b34f9cc970c9096c468cde89faf61e50757dd83635aa95ef3b6",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 10251867,
        "transactionHash": "0x76bfea06aa2d4b34f9cc970c9096c468cde89faf61e50757dd83635aa95ef3b6",
        "address": "0x8A5669A5b011689872AFfB64cd4BE2e2e509A370",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5af44b2e01445cd2093ce254cd95b80354fcc97"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0xedcfb01a096701f1a84f843e6c13e556a6e569665b184329eac1406016bef674"
      }
    ],
    "blockNumber": 10251867,
    "cumulativeGasUsed": "15290881",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "GoldBar",
    "SGB",
    "https://ipfs.io/ipfs/QmRUgtNAWCz1NypSyBncuoFHQHu7fPFN8DAPTcZgh5E4G4/"
  ],
  "numDeployments": 3,
  "solcInputHash": "179d833f881a3a634465b57711ac811b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_initBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftcreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMintedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedverified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsRevealed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainCollections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainNFTforUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaDataFolder\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPerAddressLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintState\",\"type\":\"uint256\"}],\"name\":\"setMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setNftPerAddressLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"setOnlyWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_RevealedURI\",\"type\":\"string\"}],\"name\":\"setRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GoldBar.sol\":\"GoldBar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/GoldBar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n///@consensys SWC-103\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract GoldBar is ERC721Enumerable, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    \\r\\n    // Optional mapping for token URIs\\r\\n    mapping (uint256 => string) private _tokenURIs;\\r\\n\\r\\n    string public baseURI;\\r\\n    string public baseExtension     = \\\".json\\\";\\r\\n    string public metaDataFolder    = \\\"metadata/\\\";\\r\\n    string public notRevealedUri    = \\\"https://ipfs.io/ipfs/QmbBGF4sQXDPtXLWVbm4aMq7J6HryPoCBD8wzUv5wNV8E1/1.json\\\";\\r\\n    string public _name;\\r\\n    string public _symbol;\\r\\n    string public _initBaseURI;\\r\\n\\r\\n    uint256 public cost             =   0.0799 ether;    \\r\\n    uint256 public maxSupply        =   2112;\\r\\n    uint256 public remainTokenAmount=   2112;\\r\\n\\r\\n    uint256 public maxMintAmount    =   7;   \\r\\n    uint256 public nftPerAddressLimit=  7;\\r\\n\\r\\n    uint256 public onlyWhitelisted     = 1;\\r\\n    uint256 public revealed            = 0;\\r\\n    bool public paused              = false;\\r\\n    bool public deployedverified    = false;\\r\\n    uint256 public mintState        = 1; // 1 : presale 1, 2: public\\r\\n    address public _nftcreator      = owner();\\r\\n    address[] public whitelistedAddresses;\\r\\n    mapping(address => uint256) public addressMintedBalance;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _initBaseURI\\r\\n    ) ERC721(_name, _symbol) {\\r\\n        setBaseURI(_initBaseURI);\\r\\n    }\\r\\n\\r\\n    // internal\\r\\n    // convenience function to return the baseURI\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint256 _mintAmount) public payable {\\r\\n        uint256 supply = totalSupply();\\r\\n        require(!paused, \\\"the contract is paused\\\");\\r\\n        require(msg.sender != address(0x0), \\\"Recipient should be present\\\");\\r\\n        require(_mintAmount > 0, \\\"need to mint at least 1 NFT\\\");\\r\\n        require(remainTokenAmount > 0, \\\"max NFT limit exceeded\\\");\\r\\n\\r\\n        if (msg.sender != owner()) {\\r\\n            if (onlyWhitelisted == 1) {\\r\\n                require(isWhitelisted(msg.sender), \\\"user is not whitelisted\\\");\\r\\n                uint256 ownerMintedCount = addressMintedBalance[msg.sender];\\r\\n                require(\\r\\n                    ownerMintedCount + _mintAmount <= nftPerAddressLimit,\\r\\n                    \\\"max NFT per address exceeded\\\"\\r\\n                );\\r\\n            }\\r\\n            //if owner change cost then frontend must be changed\\r\\n            require(msg.value != 0, \\\"Royalty value should be positive\\\" );\\r\\n            require(msg.value >= cost * _mintAmount, \\\"insufficient funds\\\");\\r\\n            require(_mintAmount <= maxMintAmount, \\\"max mint amount per session exceeded\\\");\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\r\\n            _safeMint(_to, supply + i);\\r\\n            // ERC1155 mint function\\r\\n            // _mint(msg.sender, maxSupply - remainTokenAmount, 1, \\\"\\\");\\r\\n            addressMintedBalance[msg.sender]++;\\r\\n            remainTokenAmount--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address _user) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < whitelistedAddresses.length; i++) {\\r\\n            if (whitelistedAddresses[i] == _user) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n\\r\\n    // return all NFTs for a particular owner\\r\\n    function walletOfOwner(address _owner)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 ownerTokenCount = balanceOf(_owner);\\r\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\r\\n        for (uint256 i; i < ownerTokenCount; i++) {\\r\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = _baseURI();\\r\\n\\r\\n        if(revealed == 0) return notRevealedUri;\\r\\n    \\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(base, _tokenURI, baseExtension));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(base, tokenId.toString(), baseExtension));\\r\\n    }\\r\\n\\r\\n    //set mint state 1: presale1 2: presale2 3: public sale\\r\\n    function setMintState(uint256 _mintState) public onlyOwner {\\r\\n        require(_mintState >= 1, \\\"Input Wrong mint state \\\" );\\r\\n        require(_mintState <= 2, \\\"Input Wrong mint state \\\" );\\r\\n        mintState = _mintState;\\r\\n        if(mintState == 1){\\r\\n            setNftPerAddressLimit(7);\\r\\n            setmaxMintAmount(7);\\r\\n        }else if(mintState == 2){\\r\\n            setNftPerAddressLimit(100);\\r\\n            setmaxMintAmount(100);\\r\\n            setOnlyWhitelisted(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //to be seen how many collections are minted and remained in frontend \\r\\n    function getRemainCollections() public view returns (uint256) {\\r\\n        return remainTokenAmount;\\r\\n    }\\r\\n\\r\\n    //to be seen how many nfts user minted and can mint\\r\\n    function getRemainNFTforUser() public view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        if (msg.sender != owner()) {\\r\\n            amount = nftPerAddressLimit - addressMintedBalance[msg.sender];\\r\\n        }else {\\r\\n            amount = 200;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n    \\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n    \\r\\n    //only owner\\r\\n    function reveal() public onlyOwner {\\r\\n        revealed = 1;\\r\\n    }\\r\\n\\r\\n    function setCost(uint256 _newCost) public onlyOwner {\\r\\n        cost = _newCost;\\r\\n    }\\r\\n\\r\\n    function getMintState() public view returns (uint256) {\\r\\n        return mintState;\\r\\n    }\\r\\n\\r\\n    function getIsRevealed() public view returns (uint256) {\\r\\n        return revealed;\\r\\n    }\\r\\n\\r\\n    function setNftPerAddressLimit(uint256 _limit) public onlyOwner {\\r\\n        nftPerAddressLimit = _limit;\\r\\n    }\\r\\n\\r\\n    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\r\\n        maxMintAmount = _newmaxMintAmount;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseExtension(string memory _newBaseExtension)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        baseExtension = _newBaseExtension;\\r\\n    }\\r\\n\\r\\n    function setRevealedURI(string memory _RevealedURI) public onlyOwner {\\r\\n        reveal(); setBaseURI(_RevealedURI);\\r\\n    }\\r\\n\\r\\n    function pause(bool _state) public onlyOwner {\\r\\n        paused = _state;\\r\\n    }\\r\\n\\r\\n    function isPaused() public view returns (uint256) {\\r\\n        if(paused == true) return 1;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function setOnlyWhitelisted(uint256 _state) public onlyOwner {\\r\\n        onlyWhitelisted = _state;\\r\\n    }\\r\\n\\r\\n    function whitelistUsers(address[] calldata _users) public onlyOwner {\\r\\n        delete whitelistedAddresses;\\r\\n        whitelistedAddresses = _users;\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        // =============================================================================\\r\\n\\r\\n        // This will payout the owner 100% of the contract balance.\\r\\n        // Do not remove this otherwise you will not be able to withdraw the funds.\\r\\n        // =============================================================================\\r\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n        // =============================================================================\\r\\n    }\\r\\n}\\r\\n\\r\\n \",\"keccak256\":\"0x2a55b072884102021446cca01370f4bacdc5de228ae0f22a0f3f4a560a1c3556\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264173539b7b760d91b60a09081526200002891600d919062000248565b50604080518082019091526009808252686d657461646174612f60b81b60209092019182526200005b91600e9162000248565b506040518060800160405280604a815260200162003414604a913980516200008c91600f9160209091019062000248565b5067011bdca06d8dc000601355610840601481905560155560076016819055601755600160188190556000601955601a805461ffff19169055601b55600a54601c80546001600160a01b0319166001600160a01b03909216919091179055348015620000f757600080fd5b506040516200345e3803806200345e8339810160408190526200011a91620003a1565b8251839083906200013390600090602085019062000248565b5080516200014990600190602084019062000248565b50505062000166620001606200017a60201b60201c565b6200017e565b6200017181620001d0565b50505062000481565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b031633146200022f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b80516200024490600c90602084019062000248565b5050565b82805462000256906200042e565b90600052602060002090601f0160209004810192826200027a5760008555620002c5565b82601f106200029557805160ff1916838001178555620002c5565b82800160010185558215620002c5579182015b82811115620002c5578251825591602001919060010190620002a8565b50620002d3929150620002d7565b5090565b5b80821115620002d35760008155600101620002d8565b600082601f830112620002ff578081fd5b81516001600160401b03808211156200031c576200031c6200046b565b604051601f8301601f19908116603f011681019082821181831017156200034757620003476200046b565b8160405283815260209250868385880101111562000363578485fd5b8491505b8382101562000386578582018301518183018401529082019062000367565b838211156200039757848385830101525b9695505050505050565b600080600060608486031215620003b6578283fd5b83516001600160401b0380821115620003cd578485fd5b620003db87838801620002ee565b94506020860151915080821115620003f1578384fd5b620003ff87838801620002ee565b9350604086015191508082111562000415578283fd5b506200042486828701620002ee565b9150509250925092565b600181811c908216806200044357607f821691505b602082108114156200046557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612f8380620004916000396000f3fe60806040526004361061038c5760003560e01c806370a08231116101dc578063ba4e5c4911610102578063cea7cf90116100a0578063da3ef23f1161006f578063da3ef23f14610998578063e985e9c5146109b8578063edec5f2714610a01578063f2fde38b14610a2157600080fd5b8063cea7cf901461092d578063d0eb26b01461094d578063d28d88521461096d578063d5abeb011461098257600080fd5b8063c5f9816b116100dc578063c5f9816b146108c2578063c6682862146108e2578063c7873b83146108f7578063c87b56dd1461090d57600080fd5b8063ba4e5c4914610876578063ba7d2c7614610896578063c051e38a146108ac57600080fd5b806395d89b411161017a578063aac8520a11610149578063aac8520a1461080d578063b09f12661461082c578063b187bd2614610841578063b88d4fde1461085657600080fd5b806395d89b41146107ad5780639c70b512146107c2578063a22cb465146107d8578063a475b5dd146107f857600080fd5b8063774a8835116101b6578063774a8835146107455780637f00c7a61461075a5780638da5cb5b1461077a5780639502743d1461079857600080fd5b806370a08231146106fb578063715018a61461071b578063743cc26a1461073057600080fd5b806323b872dd116102c1578063438b63001161025f57806355f804b31161022e57806355f804b31461068c5780635c975abb146106ac5780636352211e146106c65780636c0360eb146106e657600080fd5b8063438b63001461060957806344a0d68a146106365780634f6ccce714610656578063518302271461067657600080fd5b80633af32abf1161029b5780633af32abf146105ae5780633ccfd60b146105ce57806340c10f19146105d657806342842e0e146105e957600080fd5b806323b872dd1461054e5780632f745c591461056e578063326d43881461058e57600080fd5b8063095ea7b31161032e57806318160ddd1161030857806318160ddd146104e157806318cae269146104f65780631de18b3614610523578063239c70ae1461053857600080fd5b8063095ea7b31461048b5780630bb862d1146104ab57806313faede6146104cb57600080fd5b806306fdde031161036a57806306fdde031461040757806307c0af4714610429578063081812fc1461043e578063081c8c441461047657600080fd5b806301ffc9a71461039157806302329a29146103c657806302fcb7af146103e8575b600080fd5b34801561039d57600080fd5b506103b16103ac366004612af6565b610a41565b60405190151581526020015b60405180910390f35b3480156103d257600080fd5b506103e66103e1366004612adc565b610a6c565b005b3480156103f457600080fd5b506015545b6040519081526020016103bd565b34801561041357600080fd5b5061041c610ab2565b6040516103bd9190612cfb565b34801561043557600080fd5b506019546103f9565b34801561044a57600080fd5b5061045e610459366004612b74565b610b44565b6040516001600160a01b0390911681526020016103bd565b34801561048257600080fd5b5061041c610bd9565b34801561049757600080fd5b506103e66104a6366004612a43565b610c67565b3480156104b757600080fd5b506103e66104c6366004612b74565b610d7d565b3480156104d757600080fd5b506103f960135481565b3480156104ed57600080fd5b506008546103f9565b34801561050257600080fd5b506103f9610511366004612913565b601e6020526000908152604090205481565b34801561052f57600080fd5b5061041c610e8b565b34801561054457600080fd5b506103f960165481565b34801561055a57600080fd5b506103e6610569366004612966565b610e98565b34801561057a57600080fd5b506103f9610589366004612a43565b610ec9565b34801561059a57600080fd5b506103e66105a9366004612b2e565b610f5f565b3480156105ba57600080fd5b506103b16105c9366004612913565b610f9a565b6103e6611012565b6103e66105e4366004612a43565b6110ad565b3480156105f557600080fd5b506103e6610604366004612966565b611436565b34801561061557600080fd5b50610629610624366004612913565b611451565b6040516103bd9190612cb7565b34801561064257600080fd5b506103e6610651366004612b74565b61150f565b34801561066257600080fd5b506103f9610671366004612b74565b61153e565b34801561068257600080fd5b506103f960195481565b34801561069857600080fd5b506103e66106a7366004612b2e565b6115df565b3480156106b857600080fd5b50601a546103b19060ff1681565b3480156106d257600080fd5b5061045e6106e1366004612b74565b611620565b3480156106f257600080fd5b5061041c611697565b34801561070757600080fd5b506103f9610716366004612913565b6116a4565b34801561072757600080fd5b506103e661172b565b34801561073c57600080fd5b506103f9611761565b34801561075157600080fd5b50601b546103f9565b34801561076657600080fd5b506103e6610775366004612b74565b6117b3565b34801561078657600080fd5b50600a546001600160a01b031661045e565b3480156107a457600080fd5b5061041c6117e2565b3480156107b957600080fd5b5061041c6117ef565b3480156107ce57600080fd5b506103f960185481565b3480156107e457600080fd5b506103e66107f3366004612a1a565b6117fe565b34801561080457600080fd5b506103e6611809565b34801561081957600080fd5b50601a546103b190610100900460ff1681565b34801561083857600080fd5b5061041c61183a565b34801561084d57600080fd5b506103f9611847565b34801561086257600080fd5b506103e66108713660046129a1565b611866565b34801561088257600080fd5b5061045e610891366004612b74565b611898565b3480156108a257600080fd5b506103f960175481565b3480156108b857600080fd5b506103f9601b5481565b3480156108ce57600080fd5b506103e66108dd366004612b74565b6118c2565b3480156108ee57600080fd5b5061041c6118f1565b34801561090357600080fd5b506103f960155481565b34801561091957600080fd5b5061041c610928366004612b74565b6118fe565b34801561093957600080fd5b50601c5461045e906001600160a01b031681565b34801561095957600080fd5b506103e6610968366004612b74565b611b21565b34801561097957600080fd5b5061041c611b50565b34801561098e57600080fd5b506103f960145481565b3480156109a457600080fd5b506103e66109b3366004612b2e565b611b5d565b3480156109c457600080fd5b506103b16109d3366004612934565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a0d57600080fd5b506103e6610a1c366004612a6c565b611b9a565b348015610a2d57600080fd5b506103e6610a3c366004612913565b611bdc565b60006001600160e01b0319821663780e9d6360e01b1480610a665750610a6682611c74565b92915050565b600a546001600160a01b03163314610a9f5760405162461bcd60e51b8152600401610a9690612d60565b60405180910390fd5b601a805460ff1916911515919091179055565b606060008054610ac190612e8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610aed90612e8b565b8015610b3a5780601f10610b0f57610100808354040283529160200191610b3a565b820191906000526020600020905b815481529060010190602001808311610b1d57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610bbd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a96565b506000908152600460205260409020546001600160a01b031690565b600f8054610be690612e8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1290612e8b565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b505050505081565b6000610c7282611620565b9050806001600160a01b0316836001600160a01b03161415610ce05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a96565b336001600160a01b0382161480610cfc5750610cfc81336109d3565b610d6e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a96565b610d788383611cc4565b505050565b600a546001600160a01b03163314610da75760405162461bcd60e51b8152600401610a9690612d60565b6001811015610df25760405162461bcd60e51b8152602060048201526017602482015276024b7383aba102bb937b7339036b4b73a1039ba30ba329604d1b6044820152606401610a96565b6002811115610e3d5760405162461bcd60e51b8152602060048201526017602482015276024b7383aba102bb937b7339036b4b73a1039ba30ba329604d1b6044820152606401610a96565b601b8190556001811415610e6257610e556007611b21565b610e5f60076117b3565b50565b601b5460021415610e5f57610e776064611b21565b610e8160646117b3565b610e5f60006118c2565b60128054610be690612e8b565b610ea23382611d32565b610ebe5760405162461bcd60e51b8152600401610a9690612d95565b610d78838383611e29565b6000610ed4836116a4565b8210610f365760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a96565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610f895760405162461bcd60e51b8152600401610a9690612d60565b610f91611809565b610e5f816115df565b6000805b601d5481101561100957826001600160a01b0316601d8281548110610fd357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610ff75750600192915050565b8061100181612ec6565b915050610f9e565b50600092915050565b600a546001600160a01b0316331461103c5760405162461bcd60e51b8152600401610a9690612d60565b6000611050600a546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d806000811461109a576040519150601f19603f3d011682016040523d82523d6000602084013e61109f565b606091505b5050905080610e5f57600080fd5b60006110b860085490565b601a5490915060ff16156111075760405162461bcd60e51b81526020600482015260166024820152751d1a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610a96565b336111545760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610a96565b600082116111a45760405162461bcd60e51b815260206004820152601b60248201527f6e65656420746f206d696e74206174206c656173742031204e465400000000006044820152606401610a96565b6000601554116111ef5760405162461bcd60e51b81526020600482015260166024820152751b585e08139195081b1a5b5a5d08195e18d95959195960521b6044820152606401610a96565b600a546001600160a01b031633146113cb57601854600114156112ce5761121533610f9a565b6112615760405162461bcd60e51b815260206004820152601760248201527f75736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610a96565b336000908152601e602052604090205460175461127e8483612de6565b11156112cc5760405162461bcd60e51b815260206004820152601c60248201527f6d6178204e4654207065722061646472657373206578636565646564000000006044820152606401610a96565b505b3461131b5760405162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f7369746976656044820152606401610a96565b816013546113299190612e12565b34101561136d5760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b6044820152606401610a96565b6016548211156113cb5760405162461bcd60e51b8152602060048201526024808201527f6d6178206d696e7420616d6f756e74207065722073657373696f6e20657863656044820152631959195960e21b6064820152608401610a96565b60015b828111611430576113e8846113e38385612de6565b611fd0565b336000908152601e6020526040812080549161140383612ec6565b90915550506015805490600061141883612e74565b9190505550808061142890612ec6565b9150506113ce565b50505050565b610d7883838360405180602001604052806000815250611866565b6060600061145e836116a4565b905060008167ffffffffffffffff81111561148957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156114b2578160200160208202803683370190505b50905060005b82811015611507576114ca8582610ec9565b8282815181106114ea57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806114ff81612ec6565b9150506114b8565b509392505050565b600a546001600160a01b031633146115395760405162461bcd60e51b8152600401610a9690612d60565b601355565b600061154960085490565b82106115ac5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a96565b600882815481106115cd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600a546001600160a01b031633146116095760405162461bcd60e51b8152600401610a9690612d60565b805161161c90600c906020840190612767565b5050565b6000818152600260205260408120546001600160a01b031680610a665760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610a96565b600c8054610be690612e8b565b60006001600160a01b03821661170f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610a96565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146117555760405162461bcd60e51b8152600401610a9690612d60565b61175f6000611fea565b565b600080611776600a546001600160a01b031690565b6001600160a01b0316336001600160a01b0316146117ab57336000908152601e6020526040902054601754610a669190612e31565b5060c8919050565b600a546001600160a01b031633146117dd5760405162461bcd60e51b8152600401610a9690612d60565b601655565b600e8054610be690612e8b565b606060018054610ac190612e8b565b61161c33838361203c565b600a546001600160a01b031633146118335760405162461bcd60e51b8152600401610a9690612d60565b6001601955565b60118054610be690612e8b565b601a5460009060ff161515600114156118605750600190565b50600090565b6118703383611d32565b61188c5760405162461bcd60e51b8152600401610a9690612d95565b6114308484848461210b565b601d81815481106118a857600080fd5b6000918252602090912001546001600160a01b0316905081565b600a546001600160a01b031633146118ec5760405162461bcd60e51b8152600401610a9690612d60565b601855565b600d8054610be690612e8b565b6000818152600260205260409020546060906001600160a01b031661197d5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610a96565b6000828152600b60205260408120805461199690612e8b565b80601f01602080910402602001604051908101604052809291908181526020018280546119c290612e8b565b8015611a0f5780601f106119e457610100808354040283529160200191611a0f565b820191906000526020600020905b8154815290600101906020018083116119f257829003601f168201915b505050505090506000611a2061213e565b905060195460001415611ac157600f8054611a3a90612e8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6690612e8b565b8015611ab35780601f10611a8857610100808354040283529160200191611ab3565b820191906000526020600020905b815481529060010190602001808311611a9657829003601f168201915b505050505092505050919050565b8051611ace575092915050565b815115611b03578082600d604051602001611aeb93929190612bb8565b60405160208183030381529060405292505050919050565b80611b0d8561214d565b600d604051602001611aeb93929190612bb8565b600a546001600160a01b03163314611b4b5760405162461bcd60e51b8152600401610a9690612d60565b601755565b60108054610be690612e8b565b600a546001600160a01b03163314611b875760405162461bcd60e51b8152600401610a9690612d60565b805161161c90600d906020840190612767565b600a546001600160a01b03163314611bc45760405162461bcd60e51b8152600401610a9690612d60565b611bd0601d60006127eb565b610d78601d8383612809565b600a546001600160a01b03163314611c065760405162461bcd60e51b8152600401610a9690612d60565b6001600160a01b038116611c6b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a96565b610e5f81611fea565b60006001600160e01b031982166380ac58cd60e01b1480611ca557506001600160e01b03198216635b5e139f60e01b145b80610a6657506301ffc9a760e01b6001600160e01b0319831614610a66565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611cf982611620565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611dab5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a96565b6000611db683611620565b9050806001600160a01b0316846001600160a01b03161480611df15750836001600160a01b0316611de684610b44565b6001600160a01b0316145b80611e2157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611e3c82611620565b6001600160a01b031614611ea05760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610a96565b6001600160a01b038216611f025760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a96565b611f0d838383612267565b611f18600082611cc4565b6001600160a01b0383166000908152600360205260408120805460019290611f41908490612e31565b90915550506001600160a01b0382166000908152600360205260408120805460019290611f6f908490612de6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61161c82826040518060200160405280600081525061231f565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561209e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a96565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612116848484611e29565b61212284848484612352565b6114305760405162461bcd60e51b8152600401610a9690612d0e565b6060600c8054610ac190612e8b565b6060816121715750506040805180820190915260018152600360fc1b602082015290565b8160005b811561219b578061218581612ec6565b91506121949050600a83612dfe565b9150612175565b60008167ffffffffffffffff8111156121c457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121ee576020820181803683370190505b5090505b8415611e2157612203600183612e31565b9150612210600a86612ee1565b61221b906030612de6565b60f81b81838151811061223e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612260600a86612dfe565b94506121f2565b6001600160a01b0383166122c2576122bd81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6122e5565b816001600160a01b0316836001600160a01b0316146122e5576122e5838261245f565b6001600160a01b0382166122fc57610d78816124fc565b826001600160a01b0316826001600160a01b031614610d7857610d7882826125d5565b6123298383612619565b6123366000848484612352565b610d785760405162461bcd60e51b8152600401610a9690612d0e565b60006001600160a01b0384163b1561245457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612396903390899088908890600401612c7a565b602060405180830381600087803b1580156123b057600080fd5b505af19250505080156123e0575060408051601f3d908101601f191682019092526123dd91810190612b12565b60015b61243a573d80801561240e576040519150601f19603f3d011682016040523d82523d6000602084013e612413565b606091505b5080516124325760405162461bcd60e51b8152600401610a9690612d0e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e21565b506001949350505050565b6000600161246c846116a4565b6124769190612e31565b6000838152600760205260409020549091508082146124c9576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061250e90600190612e31565b6000838152600960205260408120546008805493945090928490811061254457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061257357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806125b957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006125e0836116a4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661266f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a96565b6000818152600260205260409020546001600160a01b0316156126d45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a96565b6126e060008383612267565b6001600160a01b0382166000908152600360205260408120805460019290612709908490612de6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461277390612e8b565b90600052602060002090601f01602090048101928261279557600085556127db565b82601f106127ae57805160ff19168380011785556127db565b828001600101855582156127db579182015b828111156127db5782518255916020019190600101906127c0565b506127e792915061285c565b5090565b5080546000825590600052602060002090810190610e5f919061285c565b8280548282559060005260206000209081019282156127db579160200282015b828111156127db5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612829565b5b808211156127e7576000815560010161285d565b600067ffffffffffffffff8084111561288c5761288c612f21565b604051601f8501601f19908116603f011681019082821181831017156128b4576128b4612f21565b816040528093508581528686860111156128cd57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146128fe57600080fd5b919050565b803580151581146128fe57600080fd5b600060208284031215612924578081fd5b61292d826128e7565b9392505050565b60008060408385031215612946578081fd5b61294f836128e7565b915061295d602084016128e7565b90509250929050565b60008060006060848603121561297a578081fd5b612983846128e7565b9250612991602085016128e7565b9150604084013590509250925092565b600080600080608085870312156129b6578081fd5b6129bf856128e7565b93506129cd602086016128e7565b925060408501359150606085013567ffffffffffffffff8111156129ef578182fd5b8501601f810187136129ff578182fd5b612a0e87823560208401612871565b91505092959194509250565b60008060408385031215612a2c578182fd5b612a35836128e7565b915061295d60208401612903565b60008060408385031215612a55578182fd5b612a5e836128e7565b946020939093013593505050565b60008060208385031215612a7e578182fd5b823567ffffffffffffffff80821115612a95578384fd5b818501915085601f830112612aa8578384fd5b813581811115612ab6578485fd5b8660208260051b8501011115612aca578485fd5b60209290920196919550909350505050565b600060208284031215612aed578081fd5b61292d82612903565b600060208284031215612b07578081fd5b813561292d81612f37565b600060208284031215612b23578081fd5b815161292d81612f37565b600060208284031215612b3f578081fd5b813567ffffffffffffffff811115612b55578182fd5b8201601f81018413612b65578182fd5b611e2184823560208401612871565b600060208284031215612b85578081fd5b5035919050565b60008151808452612ba4816020860160208601612e48565b601f01601f19169290920160200192915050565b600084516020612bcb8285838a01612e48565b855191840191612bde8184848a01612e48565b85549201918390600181811c9080831680612bfa57607f831692505b858310811415612c1857634e487b7160e01b88526022600452602488fd5b808015612c2c5760018114612c3d57612c69565b60ff19851688528388019550612c69565b60008b815260209020895b85811015612c615781548a820152908401908801612c48565b505083880195505b50939b9a5050505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612cad90830184612b8c565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612cef57835183529284019291840191600101612cd3565b50909695505050505050565b60208152600061292d6020830184612b8c565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612df957612df9612ef5565b500190565b600082612e0d57612e0d612f0b565b500490565b6000816000190483118215151615612e2c57612e2c612ef5565b500290565b600082821015612e4357612e43612ef5565b500390565b60005b83811015612e63578181015183820152602001612e4b565b838111156114305750506000910152565b600081612e8357612e83612ef5565b506000190190565b600181811c90821680612e9f57607f821691505b60208210811415612ec057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612eda57612eda612ef5565b5060010190565b600082612ef057612ef0612f0b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e5f57600080fdfea2646970667358221220cd3ed9ec7df2e7828b272700bf0cdae8f1140a34897aa6d0ecceb495d983aa6564736f6c6343000804003368747470733a2f2f697066732e696f2f697066732f516d6242474634735158445074584c5756626d34614d71374a36487279506f43424438777a557635774e563845312f312e6a736f6e",
  "deployedBytecode": "0x60806040526004361061038c5760003560e01c806370a08231116101dc578063ba4e5c4911610102578063cea7cf90116100a0578063da3ef23f1161006f578063da3ef23f14610998578063e985e9c5146109b8578063edec5f2714610a01578063f2fde38b14610a2157600080fd5b8063cea7cf901461092d578063d0eb26b01461094d578063d28d88521461096d578063d5abeb011461098257600080fd5b8063c5f9816b116100dc578063c5f9816b146108c2578063c6682862146108e2578063c7873b83146108f7578063c87b56dd1461090d57600080fd5b8063ba4e5c4914610876578063ba7d2c7614610896578063c051e38a146108ac57600080fd5b806395d89b411161017a578063aac8520a11610149578063aac8520a1461080d578063b09f12661461082c578063b187bd2614610841578063b88d4fde1461085657600080fd5b806395d89b41146107ad5780639c70b512146107c2578063a22cb465146107d8578063a475b5dd146107f857600080fd5b8063774a8835116101b6578063774a8835146107455780637f00c7a61461075a5780638da5cb5b1461077a5780639502743d1461079857600080fd5b806370a08231146106fb578063715018a61461071b578063743cc26a1461073057600080fd5b806323b872dd116102c1578063438b63001161025f57806355f804b31161022e57806355f804b31461068c5780635c975abb146106ac5780636352211e146106c65780636c0360eb146106e657600080fd5b8063438b63001461060957806344a0d68a146106365780634f6ccce714610656578063518302271461067657600080fd5b80633af32abf1161029b5780633af32abf146105ae5780633ccfd60b146105ce57806340c10f19146105d657806342842e0e146105e957600080fd5b806323b872dd1461054e5780632f745c591461056e578063326d43881461058e57600080fd5b8063095ea7b31161032e57806318160ddd1161030857806318160ddd146104e157806318cae269146104f65780631de18b3614610523578063239c70ae1461053857600080fd5b8063095ea7b31461048b5780630bb862d1146104ab57806313faede6146104cb57600080fd5b806306fdde031161036a57806306fdde031461040757806307c0af4714610429578063081812fc1461043e578063081c8c441461047657600080fd5b806301ffc9a71461039157806302329a29146103c657806302fcb7af146103e8575b600080fd5b34801561039d57600080fd5b506103b16103ac366004612af6565b610a41565b60405190151581526020015b60405180910390f35b3480156103d257600080fd5b506103e66103e1366004612adc565b610a6c565b005b3480156103f457600080fd5b506015545b6040519081526020016103bd565b34801561041357600080fd5b5061041c610ab2565b6040516103bd9190612cfb565b34801561043557600080fd5b506019546103f9565b34801561044a57600080fd5b5061045e610459366004612b74565b610b44565b6040516001600160a01b0390911681526020016103bd565b34801561048257600080fd5b5061041c610bd9565b34801561049757600080fd5b506103e66104a6366004612a43565b610c67565b3480156104b757600080fd5b506103e66104c6366004612b74565b610d7d565b3480156104d757600080fd5b506103f960135481565b3480156104ed57600080fd5b506008546103f9565b34801561050257600080fd5b506103f9610511366004612913565b601e6020526000908152604090205481565b34801561052f57600080fd5b5061041c610e8b565b34801561054457600080fd5b506103f960165481565b34801561055a57600080fd5b506103e6610569366004612966565b610e98565b34801561057a57600080fd5b506103f9610589366004612a43565b610ec9565b34801561059a57600080fd5b506103e66105a9366004612b2e565b610f5f565b3480156105ba57600080fd5b506103b16105c9366004612913565b610f9a565b6103e6611012565b6103e66105e4366004612a43565b6110ad565b3480156105f557600080fd5b506103e6610604366004612966565b611436565b34801561061557600080fd5b50610629610624366004612913565b611451565b6040516103bd9190612cb7565b34801561064257600080fd5b506103e6610651366004612b74565b61150f565b34801561066257600080fd5b506103f9610671366004612b74565b61153e565b34801561068257600080fd5b506103f960195481565b34801561069857600080fd5b506103e66106a7366004612b2e565b6115df565b3480156106b857600080fd5b50601a546103b19060ff1681565b3480156106d257600080fd5b5061045e6106e1366004612b74565b611620565b3480156106f257600080fd5b5061041c611697565b34801561070757600080fd5b506103f9610716366004612913565b6116a4565b34801561072757600080fd5b506103e661172b565b34801561073c57600080fd5b506103f9611761565b34801561075157600080fd5b50601b546103f9565b34801561076657600080fd5b506103e6610775366004612b74565b6117b3565b34801561078657600080fd5b50600a546001600160a01b031661045e565b3480156107a457600080fd5b5061041c6117e2565b3480156107b957600080fd5b5061041c6117ef565b3480156107ce57600080fd5b506103f960185481565b3480156107e457600080fd5b506103e66107f3366004612a1a565b6117fe565b34801561080457600080fd5b506103e6611809565b34801561081957600080fd5b50601a546103b190610100900460ff1681565b34801561083857600080fd5b5061041c61183a565b34801561084d57600080fd5b506103f9611847565b34801561086257600080fd5b506103e66108713660046129a1565b611866565b34801561088257600080fd5b5061045e610891366004612b74565b611898565b3480156108a257600080fd5b506103f960175481565b3480156108b857600080fd5b506103f9601b5481565b3480156108ce57600080fd5b506103e66108dd366004612b74565b6118c2565b3480156108ee57600080fd5b5061041c6118f1565b34801561090357600080fd5b506103f960155481565b34801561091957600080fd5b5061041c610928366004612b74565b6118fe565b34801561093957600080fd5b50601c5461045e906001600160a01b031681565b34801561095957600080fd5b506103e6610968366004612b74565b611b21565b34801561097957600080fd5b5061041c611b50565b34801561098e57600080fd5b506103f960145481565b3480156109a457600080fd5b506103e66109b3366004612b2e565b611b5d565b3480156109c457600080fd5b506103b16109d3366004612934565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a0d57600080fd5b506103e6610a1c366004612a6c565b611b9a565b348015610a2d57600080fd5b506103e6610a3c366004612913565b611bdc565b60006001600160e01b0319821663780e9d6360e01b1480610a665750610a6682611c74565b92915050565b600a546001600160a01b03163314610a9f5760405162461bcd60e51b8152600401610a9690612d60565b60405180910390fd5b601a805460ff1916911515919091179055565b606060008054610ac190612e8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610aed90612e8b565b8015610b3a5780601f10610b0f57610100808354040283529160200191610b3a565b820191906000526020600020905b815481529060010190602001808311610b1d57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610bbd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a96565b506000908152600460205260409020546001600160a01b031690565b600f8054610be690612e8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1290612e8b565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b505050505081565b6000610c7282611620565b9050806001600160a01b0316836001600160a01b03161415610ce05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a96565b336001600160a01b0382161480610cfc5750610cfc81336109d3565b610d6e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a96565b610d788383611cc4565b505050565b600a546001600160a01b03163314610da75760405162461bcd60e51b8152600401610a9690612d60565b6001811015610df25760405162461bcd60e51b8152602060048201526017602482015276024b7383aba102bb937b7339036b4b73a1039ba30ba329604d1b6044820152606401610a96565b6002811115610e3d5760405162461bcd60e51b8152602060048201526017602482015276024b7383aba102bb937b7339036b4b73a1039ba30ba329604d1b6044820152606401610a96565b601b8190556001811415610e6257610e556007611b21565b610e5f60076117b3565b50565b601b5460021415610e5f57610e776064611b21565b610e8160646117b3565b610e5f60006118c2565b60128054610be690612e8b565b610ea23382611d32565b610ebe5760405162461bcd60e51b8152600401610a9690612d95565b610d78838383611e29565b6000610ed4836116a4565b8210610f365760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a96565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610f895760405162461bcd60e51b8152600401610a9690612d60565b610f91611809565b610e5f816115df565b6000805b601d5481101561100957826001600160a01b0316601d8281548110610fd357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610ff75750600192915050565b8061100181612ec6565b915050610f9e565b50600092915050565b600a546001600160a01b0316331461103c5760405162461bcd60e51b8152600401610a9690612d60565b6000611050600a546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d806000811461109a576040519150601f19603f3d011682016040523d82523d6000602084013e61109f565b606091505b5050905080610e5f57600080fd5b60006110b860085490565b601a5490915060ff16156111075760405162461bcd60e51b81526020600482015260166024820152751d1a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610a96565b336111545760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610a96565b600082116111a45760405162461bcd60e51b815260206004820152601b60248201527f6e65656420746f206d696e74206174206c656173742031204e465400000000006044820152606401610a96565b6000601554116111ef5760405162461bcd60e51b81526020600482015260166024820152751b585e08139195081b1a5b5a5d08195e18d95959195960521b6044820152606401610a96565b600a546001600160a01b031633146113cb57601854600114156112ce5761121533610f9a565b6112615760405162461bcd60e51b815260206004820152601760248201527f75736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610a96565b336000908152601e602052604090205460175461127e8483612de6565b11156112cc5760405162461bcd60e51b815260206004820152601c60248201527f6d6178204e4654207065722061646472657373206578636565646564000000006044820152606401610a96565b505b3461131b5760405162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f7369746976656044820152606401610a96565b816013546113299190612e12565b34101561136d5760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b6044820152606401610a96565b6016548211156113cb5760405162461bcd60e51b8152602060048201526024808201527f6d6178206d696e7420616d6f756e74207065722073657373696f6e20657863656044820152631959195960e21b6064820152608401610a96565b60015b828111611430576113e8846113e38385612de6565b611fd0565b336000908152601e6020526040812080549161140383612ec6565b90915550506015805490600061141883612e74565b9190505550808061142890612ec6565b9150506113ce565b50505050565b610d7883838360405180602001604052806000815250611866565b6060600061145e836116a4565b905060008167ffffffffffffffff81111561148957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156114b2578160200160208202803683370190505b50905060005b82811015611507576114ca8582610ec9565b8282815181106114ea57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806114ff81612ec6565b9150506114b8565b509392505050565b600a546001600160a01b031633146115395760405162461bcd60e51b8152600401610a9690612d60565b601355565b600061154960085490565b82106115ac5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a96565b600882815481106115cd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600a546001600160a01b031633146116095760405162461bcd60e51b8152600401610a9690612d60565b805161161c90600c906020840190612767565b5050565b6000818152600260205260408120546001600160a01b031680610a665760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610a96565b600c8054610be690612e8b565b60006001600160a01b03821661170f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610a96565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146117555760405162461bcd60e51b8152600401610a9690612d60565b61175f6000611fea565b565b600080611776600a546001600160a01b031690565b6001600160a01b0316336001600160a01b0316146117ab57336000908152601e6020526040902054601754610a669190612e31565b5060c8919050565b600a546001600160a01b031633146117dd5760405162461bcd60e51b8152600401610a9690612d60565b601655565b600e8054610be690612e8b565b606060018054610ac190612e8b565b61161c33838361203c565b600a546001600160a01b031633146118335760405162461bcd60e51b8152600401610a9690612d60565b6001601955565b60118054610be690612e8b565b601a5460009060ff161515600114156118605750600190565b50600090565b6118703383611d32565b61188c5760405162461bcd60e51b8152600401610a9690612d95565b6114308484848461210b565b601d81815481106118a857600080fd5b6000918252602090912001546001600160a01b0316905081565b600a546001600160a01b031633146118ec5760405162461bcd60e51b8152600401610a9690612d60565b601855565b600d8054610be690612e8b565b6000818152600260205260409020546060906001600160a01b031661197d5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610a96565b6000828152600b60205260408120805461199690612e8b565b80601f01602080910402602001604051908101604052809291908181526020018280546119c290612e8b565b8015611a0f5780601f106119e457610100808354040283529160200191611a0f565b820191906000526020600020905b8154815290600101906020018083116119f257829003601f168201915b505050505090506000611a2061213e565b905060195460001415611ac157600f8054611a3a90612e8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6690612e8b565b8015611ab35780601f10611a8857610100808354040283529160200191611ab3565b820191906000526020600020905b815481529060010190602001808311611a9657829003601f168201915b505050505092505050919050565b8051611ace575092915050565b815115611b03578082600d604051602001611aeb93929190612bb8565b60405160208183030381529060405292505050919050565b80611b0d8561214d565b600d604051602001611aeb93929190612bb8565b600a546001600160a01b03163314611b4b5760405162461bcd60e51b8152600401610a9690612d60565b601755565b60108054610be690612e8b565b600a546001600160a01b03163314611b875760405162461bcd60e51b8152600401610a9690612d60565b805161161c90600d906020840190612767565b600a546001600160a01b03163314611bc45760405162461bcd60e51b8152600401610a9690612d60565b611bd0601d60006127eb565b610d78601d8383612809565b600a546001600160a01b03163314611c065760405162461bcd60e51b8152600401610a9690612d60565b6001600160a01b038116611c6b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a96565b610e5f81611fea565b60006001600160e01b031982166380ac58cd60e01b1480611ca557506001600160e01b03198216635b5e139f60e01b145b80610a6657506301ffc9a760e01b6001600160e01b0319831614610a66565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611cf982611620565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611dab5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a96565b6000611db683611620565b9050806001600160a01b0316846001600160a01b03161480611df15750836001600160a01b0316611de684610b44565b6001600160a01b0316145b80611e2157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611e3c82611620565b6001600160a01b031614611ea05760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610a96565b6001600160a01b038216611f025760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a96565b611f0d838383612267565b611f18600082611cc4565b6001600160a01b0383166000908152600360205260408120805460019290611f41908490612e31565b90915550506001600160a01b0382166000908152600360205260408120805460019290611f6f908490612de6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61161c82826040518060200160405280600081525061231f565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561209e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a96565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612116848484611e29565b61212284848484612352565b6114305760405162461bcd60e51b8152600401610a9690612d0e565b6060600c8054610ac190612e8b565b6060816121715750506040805180820190915260018152600360fc1b602082015290565b8160005b811561219b578061218581612ec6565b91506121949050600a83612dfe565b9150612175565b60008167ffffffffffffffff8111156121c457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121ee576020820181803683370190505b5090505b8415611e2157612203600183612e31565b9150612210600a86612ee1565b61221b906030612de6565b60f81b81838151811061223e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612260600a86612dfe565b94506121f2565b6001600160a01b0383166122c2576122bd81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6122e5565b816001600160a01b0316836001600160a01b0316146122e5576122e5838261245f565b6001600160a01b0382166122fc57610d78816124fc565b826001600160a01b0316826001600160a01b031614610d7857610d7882826125d5565b6123298383612619565b6123366000848484612352565b610d785760405162461bcd60e51b8152600401610a9690612d0e565b60006001600160a01b0384163b1561245457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612396903390899088908890600401612c7a565b602060405180830381600087803b1580156123b057600080fd5b505af19250505080156123e0575060408051601f3d908101601f191682019092526123dd91810190612b12565b60015b61243a573d80801561240e576040519150601f19603f3d011682016040523d82523d6000602084013e612413565b606091505b5080516124325760405162461bcd60e51b8152600401610a9690612d0e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e21565b506001949350505050565b6000600161246c846116a4565b6124769190612e31565b6000838152600760205260409020549091508082146124c9576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061250e90600190612e31565b6000838152600960205260408120546008805493945090928490811061254457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061257357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806125b957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006125e0836116a4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661266f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a96565b6000818152600260205260409020546001600160a01b0316156126d45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a96565b6126e060008383612267565b6001600160a01b0382166000908152600360205260408120805460019290612709908490612de6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461277390612e8b565b90600052602060002090601f01602090048101928261279557600085556127db565b82601f106127ae57805160ff19168380011785556127db565b828001600101855582156127db579182015b828111156127db5782518255916020019190600101906127c0565b506127e792915061285c565b5090565b5080546000825590600052602060002090810190610e5f919061285c565b8280548282559060005260206000209081019282156127db579160200282015b828111156127db5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612829565b5b808211156127e7576000815560010161285d565b600067ffffffffffffffff8084111561288c5761288c612f21565b604051601f8501601f19908116603f011681019082821181831017156128b4576128b4612f21565b816040528093508581528686860111156128cd57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146128fe57600080fd5b919050565b803580151581146128fe57600080fd5b600060208284031215612924578081fd5b61292d826128e7565b9392505050565b60008060408385031215612946578081fd5b61294f836128e7565b915061295d602084016128e7565b90509250929050565b60008060006060848603121561297a578081fd5b612983846128e7565b9250612991602085016128e7565b9150604084013590509250925092565b600080600080608085870312156129b6578081fd5b6129bf856128e7565b93506129cd602086016128e7565b925060408501359150606085013567ffffffffffffffff8111156129ef578182fd5b8501601f810187136129ff578182fd5b612a0e87823560208401612871565b91505092959194509250565b60008060408385031215612a2c578182fd5b612a35836128e7565b915061295d60208401612903565b60008060408385031215612a55578182fd5b612a5e836128e7565b946020939093013593505050565b60008060208385031215612a7e578182fd5b823567ffffffffffffffff80821115612a95578384fd5b818501915085601f830112612aa8578384fd5b813581811115612ab6578485fd5b8660208260051b8501011115612aca578485fd5b60209290920196919550909350505050565b600060208284031215612aed578081fd5b61292d82612903565b600060208284031215612b07578081fd5b813561292d81612f37565b600060208284031215612b23578081fd5b815161292d81612f37565b600060208284031215612b3f578081fd5b813567ffffffffffffffff811115612b55578182fd5b8201601f81018413612b65578182fd5b611e2184823560208401612871565b600060208284031215612b85578081fd5b5035919050565b60008151808452612ba4816020860160208601612e48565b601f01601f19169290920160200192915050565b600084516020612bcb8285838a01612e48565b855191840191612bde8184848a01612e48565b85549201918390600181811c9080831680612bfa57607f831692505b858310811415612c1857634e487b7160e01b88526022600452602488fd5b808015612c2c5760018114612c3d57612c69565b60ff19851688528388019550612c69565b60008b815260209020895b85811015612c615781548a820152908401908801612c48565b505083880195505b50939b9a5050505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612cad90830184612b8c565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612cef57835183529284019291840191600101612cd3565b50909695505050505050565b60208152600061292d6020830184612b8c565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612df957612df9612ef5565b500190565b600082612e0d57612e0d612f0b565b500490565b6000816000190483118215151615612e2c57612e2c612ef5565b500290565b600082821015612e4357612e43612ef5565b500390565b60005b83811015612e63578181015183820152602001612e4b565b838111156114305750506000910152565b600081612e8357612e83612ef5565b506000190190565b600181811c90821680612e9f57607f821691505b60208210811415612ec057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612eda57612eda612ef5565b5060010190565b600082612ef057612ef0612f0b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e5f57600080fdfea2646970667358221220cd3ed9ec7df2e7828b272700bf0cdae8f1140a34897aa6d0ecceb495d983aa6564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1119,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1123,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1126,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1130,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2071,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2073,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "baseURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2076,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "baseExtension",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 2079,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "metaDataFolder",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 2082,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 2084,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_name",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 2086,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_symbol",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 2088,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_initBaseURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 2091,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "cost",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2094,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "maxSupply",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2097,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "remainTokenAmount",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2100,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2103,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "nftPerAddressLimit",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2106,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "onlyWhitelisted",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 2109,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "revealed",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 2112,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "paused",
        "offset": 0,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 2115,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "deployedverified",
        "offset": 1,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 2118,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "mintState",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 2122,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "_nftcreator",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 2125,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2129,
        "contract": "contracts/GoldBar.sol:GoldBar",
        "label": "addressMintedBalance",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}